{"code":"!function(e){var t={};function i(n){if(t[n])return t[n].exports;var s=t[n]={i:n,l:!1,exports:{}};return e[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var s in e)i.d(n,s,function(t){return e[t]}.bind(null,s));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,\"a\",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p=\"\",i(i.s=7)}([function(e,t,i){e.exports=i(5)()},function(e,t){e.exports=react-native},function(e,t){e.exports=react},,function(e,t,i){\"use strict\";e.exports=function(e,t,i,n,s,r,o,a){if(!e){var d;if(void 0===t)d=new Error(\"Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.\");else{var l=[i,n,s,r,o,a],c=0;(d=new Error(t.replace(/%s/g,function(){return l[c++]}))).name=\"Invariant Violation\"}throw d.framesToPop=1,d}}},function(e,t,i){\"use strict\";var n=i(6);function s(){}function r(){}r.resetWarningCache=s,e.exports=function(){function e(e,t,i,s,r,o){if(o!==n){var a=new Error(\"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types\");throw a.name=\"Invariant Violation\",a}}function t(){return e}e.isRequired=e;var i={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:r,resetWarningCache:s};return i.PropTypes=i,i}},function(e,t,i){\"use strict\";e.exports=\"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\"},function(e,t,i){\"use strict\";i.r(t);var n=i(1);var s={OS:n.Platform.OS};class r extends Error{constructor(e,t){super(t),this.code=e}}class o extends r{constructor(e,t){super(\"ERR_UNAVAILABLE\",`The method or property ${e}.${t} is not available on ${s.OS}, are you sure you've linked all the native dependencies properly?`)}}function a(e){throw new o(\"@unimodules/react-native-adapter\",\"requireNativeViewManager\")}var d=i(0),l=i.n(d),c=i(2);let p=!1;var A=(()=>{class e extends c.Component{constructor(){super(...arguments),this.state={style:{}},this._handleSizeChange=(({nativeEvent:e})=>{const{height:t,width:i}=e;this.setState({style:{width:i,height:t}})}),this._handleDidFailToReceiveAdWithError=(({nativeEvent:e})=>this.props.onDidFailToReceiveAdWithError&&this.props.onDidFailToReceiveAdWithError(e.error))}render(){const e={...this.props.additionalRequestParams};return this.props.servePersonalizedAds||(e.npa=\"1\"),this.props.testDeviceID&&!p&&(console.warn(\"The `testDeviceID` prop of AdMobBanner is deprecated. Test device IDs are now set globally. Use AdMob.setTestDeviceIDAsync instead.\"),p=!0),c.createElement(n.View,{style:this.props.style},c.createElement(h,{style:this.state.style,adUnitID:this.props.adUnitID,bannerSize:this.props.bannerSize,onSizeChange:this._handleSizeChange,additionalRequestParams:e,onAdViewDidReceiveAd:this.props.onAdViewDidReceiveAd,onDidFailToReceiveAdWithError:this._handleDidFailToReceiveAdWithError,onAdViewWillPresentScreen:this.props.onAdViewWillPresentScreen,onAdViewWillDismissScreen:this.props.onAdViewWillDismissScreen,onAdViewDidDismissScreen:this.props.onAdViewDidDismissScreen,onAdViewWillLeaveApplication:this.props.onAdViewWillLeaveApplication}))}}return e.propTypes={bannerSize:l.a.oneOf([\"banner\",\"largeBanner\",\"mediumRectangle\",\"fullBanner\",\"leaderboard\",\"smartBannerPortrait\",\"smartBannerLandscape\"]),adUnitID:l.a.string,servePersonalizedAds:l.a.bool,onAdViewDidReceiveAd:l.a.func,additionalRequestParams:l.a.object,onDidFailToReceiveAdWithError:l.a.func,onAdViewWillPresentScreen:l.a.func,onAdViewWillDismissScreen:l.a.func,onAdViewDidDismissScreen:l.a.func,onAdViewWillLeaveApplication:l.a.func,...n.ViewPropTypes},e.defaultProps={bannerSize:\"smartBannerPortrait\"},e})();const h=a();var u=i(4),v=i.n(u);const w=\"@@nativeEmitterSubscription@@\";class f{constructor(e){this._listenerCount=0,this._nativeModule=e,this._eventEmitter=new n.NativeEventEmitter(e)}addListener(e,t){!this._listenerCount&&\"ios\"!==n.Platform.OS&&this._nativeModule.startObserving&&this._nativeModule.startObserving(),this._listenerCount++;const i=this._eventEmitter.addListener(e,t),s={[w]:i,remove:()=>{this.removeSubscription(s)}};return s}removeAllListeners(e){const t=this._eventEmitter.listeners(e).length;this._eventEmitter.removeAllListeners(e),this._listenerCount-=t,v()(this._listenerCount>=0,\"EventEmitter must have a non-negative number of listeners\"),!this._listenerCount&&\"ios\"!==n.Platform.OS&&this._nativeModule.stopObserving&&this._nativeModule.stopObserving()}removeSubscription(e){const t=e[w];t&&(this._eventEmitter.removeSubscription(t),this._listenerCount--,delete e[w],e.remove=(()=>{}),!this._listenerCount&&\"ios\"!==n.Platform.OS&&this._nativeModule.stopObserving&&this._nativeModule.stopObserving())}emit(e,...t){this._eventEmitter.emit(e,...t)}}var D={},m=D.ExpoAdsAdMob||{};async function y(e){if(!m.setTestDeviceIDAsync)throw new o(\"expo-ads-admob\",\"setTestDeviceIDAsync\");await m.setTestDeviceIDAsync(e||\"\")}var b=D.ExpoAdsAdMobInterstitialManager;const g=[\"interstitialDidLoad\",\"interstitialDidFailToLoad\",\"interstitialDidOpen\",\"interstitialDidClose\",\"interstitialWillLeaveApplication\"],I=new f(b),S={};for(const e of g)S[e]=new Map;var E={async setAdUnitID(e){if(!b.setAdUnitID)throw new o(\"AdMobInterstitial\",\"setAdUnitID\");await b.setAdUnitID(e)},async setTestDeviceID(e){console.warn(\"AdMobInterstitial.setTestDeviceID is deprecated. Test device IDs are now set globally. Use AdMob.setTestDeviceIDAsync instead.\"),await y(e)},async requestAdAsync(e={}){if(!b.requestAd)throw new o(\"AdMobInterstitial\",\"requestAdAsync\");const t={...e.additionalRequestParams};e.servePersonalizedAds||(t.npa=\"1\"),await b.requestAd(t)},async showAdAsync(){if(!b.showAd)throw new o(\"AdMobInterstitial\",\"showAdAsync\");await b.showAd()},async dismissAdAsync(){if(!b.dismissAd)throw new o(\"AdMobInterstitial\",\"dismissAdAsync\");await b.dismissAd()},async getIsReadyAsync(){if(!b.getIsReady)throw new o(\"AdMobInterstitial\",\"getIsReadyAsync\");return await b.getIsReady()},addEventListener(e,t){g.includes(e)?S[e].set(t,I.addListener(e,t)):console.log(`Event with type ${e} does not exist.`)},removeEventListener(e,t){const i=S[e].get(t);S[e].has(t)&&i&&(i.remove(),S[e].delete(t))},removeAllListeners(){for(const e of g)I.removeAllListeners(e)}},R=D.ExpoAdsAdMobRewardedVideoAdManager;const T=[\"rewardedVideoDidRewardUser\",\"rewardedVideoDidLoad\",\"rewardedVideoDidFailToLoad\",\"rewardedVideoDidOpen\",\"rewardedVideoDidStart\",\"rewardedVideoDidClose\",\"rewardedVideoWillLeaveApplication\"],P=new f(R),V={};for(const e of T)V[e]=new Map;var _={async setAdUnitID(e){if(!R.setAdUnitID)throw new o(\"AdMobRewarded\",\"setAdUnitID\");await R.setAdUnitID(e)},async setTestDeviceID(e){console.warn(\"AdMobRewarded.setTestDeviceID is deprecated. Test device IDs are now set globally. Use AdMob.setTestDeviceIDAsync instead.\"),await y(e)},async requestAdAsync(e={}){if(!R.requestAd)throw new o(\"AdMobRewarded\",\"requestAdAsync\");const t={...e.additionalRequestParams};e.servePersonalizedAds||(t.npa=\"1\"),await R.requestAd(t)},async showAdAsync(){if(!R.showAd)throw new o(\"AdMobRewarded\",\"showAdAsync\");await R.showAd()},async dismissAdAsync(){if(!R.dismissAd)throw new o(\"AdMobRewarded\",\"dismissAdAsync\");await R.dismissAd()},async getIsReadyAsync(){if(!R.getIsReady)throw new o(\"AdMobRewarded\",\"getIsReadyAsync\");return await R.getIsReady()},addEventListener(e,t){T.includes(e)?V[e].set(t,P.addListener(e,t)):console.log(`Event with type ${e} does not exist.`)},removeEventListener(e,t){const i=V[e].get(t);V[e].has(t)&&i&&(i.remove(),V[e].delete(t))},removeAllListeners(){for(const e of T)P.removeAllListeners(e)}};let M=!1;var W=(()=>{class e extends c.Component{constructor(){super(...arguments),this.state={style:{}},this._handleSizeChange=(({nativeEvent:e})=>{const{height:t,width:i}=e;this.setState({style:{width:i,height:t}})}),this._handleDidFailToReceiveAdWithError=(({nativeEvent:e})=>this.props.onDidFailToReceiveAdWithError&&this.props.onDidFailToReceiveAdWithError(e.error))}render(){const e={...this.props.additionalRequestParams};return this.props.servePersonalizedAds||(e.npa=\"1\"),this.props.testDeviceID&&!M&&(console.warn(\"The `testDeviceID` prop of PublisherBanner is deprecated. Test device IDs are now set globally. Use AdMob.setTestDeviceID instead.\"),M=!0),c.createElement(n.View,{style:this.props.style},c.createElement(L,{style:this.state.style,adUnitID:this.props.adUnitID,bannerSize:this.props.bannerSize,onSizeChange:this._handleSizeChange,additionalRequestParams:e,onAdViewDidReceiveAd:this.props.onAdViewDidReceiveAd,onDidFailToReceiveAdWithError:this._handleDidFailToReceiveAdWithError,onAdViewWillPresentScreen:this.props.onAdViewWillPresentScreen,onAdViewWillDismissScreen:this.props.onAdViewWillDismissScreen,onAdViewDidDismissScreen:this.props.onAdViewDidDismissScreen,onAdViewWillLeaveApplication:this.props.onAdViewWillLeaveApplication,onAdmobDispatchAppEvent:this.props.onAdMobDispatchAppEvent}))}}return e.propTypes={bannerSize:l.a.oneOf([\"banner\",\"largeBanner\",\"mediumRectangle\",\"fullBanner\",\"leaderboard\",\"smartBannerPortrait\",\"smartBannerLandscape\"]),adUnitID:l.a.string,servePersonalizedAds:l.a.bool,onAdViewDidReceiveAd:l.a.func,additionalRequestParams:l.a.object,onDidFailToReceiveAdWithError:l.a.func,onAdViewWillPresentScreen:l.a.func,onAdViewWillDismissScreen:l.a.func,onAdViewDidDismissScreen:l.a.func,onAdViewWillLeaveApplication:l.a.func,onAdmobDispatchAppEvent:l.a.func,...n.ViewPropTypes},e.defaultProps={bannerSize:\"smartBannerPortrait\"},e})();const L=a();console.log({AdMobBanner:A,AdMobInterstitial:E,AdMobRewarded:_,PublisherBanner:W,TestIds:void 0,setTestDeviceIDAsync:y})}]);","extractedComments":[]}